---
title: MongoDB
owner: Services
---

<strong><%= modified_date %></strong>

## <a id='integrating-your-service'></a> Integrating the Service With Your App

After the [creation](../devguide/services/managing-services.html#create) of the service and the [binding](../devguide/services/application-binding.html#bind) of the service to the application, the environment variable [VCAP_SERVICES](../devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) is created. Information about the credentials are stored in this variable as shown here:

```json
{
  "mongodb": [
    {
      "credentials": {
        "database": "B4aoTv0R5jLZ0ert",
        "database_uri": "mongodb://GUoTS9oD4zwCib:mZCefFh@56nf9pbtprvzu.service.consul:57890/B4aoTv0R5jLZ0ert",
        "host": "56nf9pbtprvzu.service.consul",
        "password": "mZCefFh",
        "uri": "mongodb://GUoTS9oD4zwCib:mZCefFh@56nf9pbtprvzu.service.consul:57890/B4aoTv0R5jLZ0ert",
        "username": "GUoTS9oD4zwCib"
      },
      "label": "mongodb",
      "plan": "small",
      "tags": []
    }
  ]
}
```

<p class="note">
  <strong>Important:</strong> Please be aware that the number of concurrent connections to MongoDB is limited depending on the service plan you chose. You can manage this by using connection pooling.
</p>

## <a id='administrating'></a> Administrating your MongoDB instances

To connect to a running MongoDB instance with your local development tools, you can use the [`cf ssh`](../devguide/deploy-apps/ssh-services.html) feature of the cf CLI.

## <a id='sample-application'></a> Sample Application

Cloud Foundry: [Spring Music Example](https://github.com/cloudfoundry-samples/spring-music)

## <a id='specifications'></a> Specifications

Our [MongoDB](https://www.mongodb.com/community) offering consists of 3 Kubernetes containers configured as a replica set.

## <a id='roles'></a> Roles

You will receive the role `clusterMonitor` on the admin DB, and the roles `readWrite` and `dbAdmin` on your DB.

## <a id='bestpractices'></a> Best Practices for Developers

- Write concern 2

  Please read [Replica Set Read and Write Semantics](https://docs.mongodb.com/manual/applications/replication). We recommend a "Write Concern" of `2` in order to ensure data consistency at all times, even if the replica set temporarily consists of just 2 nodes e.g. during system maintenance.

- Use an application driver maintained by the MongoDB team

  Itâ€™s critical to find a driver that [is well maintained](https://docs.mongodb.com/ecosystem/drivers/) and stays up to date with the latest MongoDB features.

- Index early and often

  Without question, the most common database performance issue is improper indexing (or a complete lack thereof). Have a look at the [Indexes manual](https://docs.mongodb.com/manual/indexes/).

- Consider a query timeout

  MongoDB targets operations for termination if the associated cursor exceeds its allotted time limit. See [cursor.maxTimeMS()](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/) for more details.

## <a id='warnings'></a> Warnings

In accordance with the service plan you choose from the marketplace, resource limitations are enforced. Please note that exhausting those limitations comes with certain risks, and MongoDB itself only has very limited means of preventing overload / overuse.

- Memory

  If a replica set member of your MongoDB service instance exhausts the available memory, its `mongod` process will be killed and restarted. Luckily, the MongoDB replica set and MongoDB driver will mitigate this efficiently and without any noticeable downtime by default. However, your experience might degrade if the load isn't reduced and this keeps happening repeatedly within a short time frame.

- Storage

  If a replica set member of your MongoDB service instance runs out of disk space, its `mongod` process will crash and likely not be able to recover automatically. Additionally, there's an increased risk of data corruption if this happens.

- Connections

  If you reach the maximum number of connections, you won't be able to open additional connections before closing existing ones. Furthermore, it will prevent self-maintenance of the MongoDB service which can lead to a service outage until resolved.
