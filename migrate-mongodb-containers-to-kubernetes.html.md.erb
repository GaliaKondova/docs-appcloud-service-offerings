---
title: Migrate from legacy MongoDB container to new MongoDB container based on Kubernetes
owner: Services
---

<strong><%= modified_date %></strong>

We have a completely new MongoDB container service in store for you. It comes with many improvements (recent MongoDB version and high availability with replica set) and we recommend to upgrade as soon as possible.

<pre class="terminal">
$ cf marketplace | grep mongodb
</pre>

*Important*: Please make sure that you have the latest [cf CLI](https://github.com/cloudfoundry/cli) installed before you follow this migration guide.

First, create a new MongoDB Container instance and bind it to your app using the old MongoDB Container service:

<pre class="terminal">
$ cf create-service mariadbent usage my-db-new
$ cf bind-service my-awesome-app my-db-new
</pre>

Next, stop your app:

<pre class="terminal">
$ cf stop my-awesome-app
</pre>

As a next step, we'll have to install the MongoDB server (which contains `mongodump` and `mongorestore`)

On macOS, you can use [Homebrew](https://brew.sh/). For other systems, please refer to your package manager.

<pre class="terminal">
# macOS only
$ brew install mongodb
</pre>

Next, we'll use [`cf ssh`](https://docs.developer.swisscom.com/devguide/deploy-apps/ssh-services.html) to access our services. As the proxy, you can either use an existing running app (Don't use an app which is bound to your MongoDB container service. These need to remain stopped for data consistency reasons.) in the same space or just push a dummy app if you don't have one. This app will only be used to SSH into so we get access to our service instances.

*Important*: Please make sure that the app you are using has been pushed or restarted within the last week since it needs to use the latest [security groups](https://docs.cloudfoundry.org/concepts/asg.html) to be able to connect to the new MongoDB container service replica set.

<pre class="terminal">
# Only needed if you don't have a running app in your space
$ git clone https://github.com/cloudfoundry-community/cf-env.git
$ cd cf-env
$ cf push proxy-app --no-route
</pre>

Now, we'll need to create [serivce keys](https://docs.developer.swisscom.com/devguide/services/service-keys.html) for our service instances to get access credentials for them. To get these, run the following commands:

<pre class="terminal">
# Old database
$ cf create-service-key my-db migration
$ cf service-key my-db migration
{ ... }

# New database
$ cf create-service-key my-db-new migration
$ cf service-key my-db-new migration
{ ... }
</pre>

We'll use these credentials in the following steps, so remember how to get them. Please replace the terms in `<...>` with the respective value from these service keys.

Next, create an SSH tunnel to your old DB through the proxy app (or any other app you intend to use).

<pre class="terminal">
cf ssh proy-app -L 13000:&lt;old-db-host&gt;:&lt;old-db-port&gt;
</pre>

Now that we're connected, we can dump the old database using `mongodump`. Open a new terminal and run the following command:

<pre class="terminal">
$ mongodump -h localhost --port 13000 -u &lt;old-db-username&gt; -p --archive=/tmp/my-db-dump.archive -vvvvv &lt;old-db-database&gt;
Enter password: &lt;old-db-password&gt;
</pre>

Next, create an SSH tunnel to the new MongoDB container service. You need to connect to the current primary (not secondary). Open the terminal where you have the SSH connection open, press `ctrl+c` and run the following command:

<pre class="terminal">
$ cf ssh proy-app -L 13000:&lt;new-db-host&gt;:&lt;new-db-port&gt;
</pre>

Now we'll use the `mongorestore` CLI to restore the dump we created in the new MariaDB:

<pre class="terminal">
mongorestore --host localhost --port 13000--username &lt;new-db-username&gt; --drop --writeConcern 2 --archive=/tmp/my-db-dump.archive --gzip
Enter password: &lt;new-db-password&gt;
</pre>
Maybe you see errors or warnings. For example:

If you need support, please ask on [Stack Overflow #swisscomdev] (https://docs.developer.swisscom.com/devguide-sc/support.html).

Now, we can unbind the old MongoDB container service and rename the new database to use the real name:

<pre class="terminal">
$ cf unbind-service my-awesome-app my-db
$ cf rename-service my-db my-db-old
$ cf rename-service my-db-new my-db
</pre>

*Important*: The new service will be under `mariadbent` instead of `mariadb` in the `VCAP_SERVICES` environment variable. If your app code uses these names in the JSON structure to bind to the app, please change it accordingly.

Now it's time to start your app again with the new MariaDB

<pre class="terminal">
$ cf start my-awesome-app
</pre>

For some apps, you'll also need to do a restage so they can pick up all environment variables properly:

<pre class="terminal">
# Optional
$ cf restage my-awesome-app
</pre>

As soon as everything is working properly, you can remove the service keys and the old database:

<pre class="terminal">
$ cf delete-service-key my-old migration
$ cf delete-service-key my-db-old migration
$ cf delete-service my-db-old
</pre>

You have now migrated your app to the new MariaDB service. Congrats! Please repeat for all apps using the old one.
